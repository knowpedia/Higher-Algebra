<template>
    <div class='doc-view' id='root-view'>
        <header id="fixed-top">多项式</header>
        <h1 id='fixed-sy'>
            数域
        </h1>
        <h2>
            定义
        </h2>
        <p>
            设P是由一些复数组成的集合，其中包括0和1。如果P中任意两个数（这两个数也可以相同）的和、差、积、商（除数不为零）仍然是P中的数，那么，P就称为一个
            <span class="important">
                数域
            </span>
            。
        </p>
        <h1 id='fixed-yydxs'>
            一元多项式
        </h1>
        <h2>
            定义
        </h2>
        <p>
            设n是一非负整数。表达式
        <div class='center-line' kp-math-formula="mathFormulas.yydxs"></div>，其中
        <span kp-math-formula="mathFormulas.a0"></span>，
        <span kp-math-formula="mathFormulas.a1"></span>，
        <span kp-math-formula="mathFormulas.an"></span>
        全属于数域P，称为
        <span class="important">系数在数域P中的一元多项式</span>
        ，或者简称为
        <span class="important">数域P上的一元多项式</span>
        。
        </p>
        <p>
            在上面的多项式中，
            <span kp-math-formula='mathFormulas.axi'></span>
            称为i
            <span class="important">次项</span>
            ，
            <span kp-math-formula='mathFormulas.ai'></span>
            称为i次项的
            <span class="important">系数</span>
            。同时，用f(x)，g(x)，...来表示多项式。
        </p>
        <h2>
            定义
        </h2>
        <p>
            如果在多项式f(x)与g(x)中，除去系数为零的项外，同次项的系数全相等，那么f(x)与g(x)就称为
            <span class="important">相等</span>，记为：f(x)=g(x)。系数全为零的多项式称为
            <span class="important">零多项式</span>
            ，记为0。
        </p>
        <p>
            上面定义的多项式，如果
            <span kp-math-formula="mathFormulas.an"></span>
            ≠0，那么
            <span kp-math-formula='mathFormulas.axn'></span>
            称为多项式的
            <span class="important">首项</span>，
            <span kp-math-formula="mathFormulas.an"></span>
            称为
            <span class="important">首项系数</span>
            ，n称为多项式的
            <span class="important">次数</span>
            。零次多项式是唯一不定义次数的多项式。多项式f(x)的次数记为deg(f(x))。
        </p>
        <h2>
            定义
        </h2>
        <p>
            所有系数在数域P中的一元多项式的全体，称为数域P上的
            <span class="important">一元多项式环</span>
            ，记为P[x]，P称为P[x]的系数域。
        </p>
        <h1 id='fixed-zcdgl'>
            整除的概念
        </h1>
        <h3>
            带余除法
        </h3>
        <p>
            对于P[x]中任意两个多项式f(x)与g(x)，其中g(x)≠0，一定有P[x]中的多项式q(x)，r(x)存在，使
            <span class='center-line'>f(x) = q(x)g(x) + r(x)</span>
            成立，其中deg(r(x)) &lt; deg(g(x))或者r(x) = 0，并且这样的q(x)，r(x)是唯一决定的。
        </p>
        <p>
            带余除法中所得的q(x)通常称为g(x)除f(x)的商，r(x)称为g(x)除f(x)的余式。
        </p>
        <h2>
            定义
        </h2>
        <p>
            数域P上的多项式g(x)称为整除f(x)，如果有数域P上的多项式h(x)使等式
            <span class="center-line">f(x) = g(x)h(x)</span>
            成立。我们用“g(x)|f(x)”表示g(x)整除f(x)，用“g(x)∤f(x)”表示g(x)不能整除f(x)。
        </p>
        <p>
            当g(x)|f(x)时，g(x)就称为f(x)的因式，f(x)称为g(x)的倍式。
        </p>
        <h1 id='fixed-zdgys'>
            最大公因式
        </h1>
        <p>
            如果多项式φ(x)即是f(x)的因式，又是g(x)的因式，那么φ(x)就称为f(x)与g(x)的一个公因式。
        </p>
        <h2>
            定义
        </h2>
        <p>
            设f(x)，g(x)是P[x]中的两个多项式。P[x]中多项式d(x)称为f(x)，g(x)的一个
            <span class="important">最大公因式</span>
            ，如果它满足下面两个条件：
        </p>
        <ul>
            <li>
                1) d(x)是f(x)，g(x)的公因式；
            </li>
            <li>
                2) f(x)，g(x)的公因式全是d(x)的因式。
            </li>
        </ul>
        <h4>
            引理
        </h4>
        <p>
            如果有等式
            <span class='center-line'>f(x) = q(x)g(x) + r(x)</span>
            成立，那么f(x)，g(x)和g(x)，r(x)有相同的公因式。
        </p>
        <h2>
            定理
        </h2>
        <p>
            对于P[x]中任意两个多项式f(x)，g(x)，在P[x]中存在一个最大公因式d(x)，且d(x)可以表成f(x)，g(x)的一个组合，即有P[x]中的多项式u(x),v(x)使
            <span class='center-line'>d(x) = u(x)f(x) + v(x)g(x)</span>
            成立。
        </p>
    </div>
</template>
<script>
    export default {
        data() {
            return {
                mathFormulas: {}
            };
        },
        mounted() {
            this.mathFormulas = {
                yydxs: this.$mathFormula.join(
                    this.$mathFormula.rightBottom("a", 'n'), this.$mathFormula.rightTop('x', 'n'),
                    "+",
                    this.$mathFormula.rightBottom("a", 'n-1'), this.$mathFormula.rightTop('x', 'n-1'),
                    "+", "···", "+",
                    this.$mathFormula.rightBottom("a", '0')),
                a0: this.$mathFormula.rightBottom('a', 0),
                a1: this.$mathFormula.rightBottom('a', 1),
                ai: this.$mathFormula.rightBottom('a', 'i'),
                an: this.$mathFormula.rightBottom('a', 'n'),
                axi: this.$mathFormula.join(
                    this.$mathFormula.rightBottom("a", 'i'), this.$mathFormula.rightTop('x', 'i')
                ),
                axn: this.$mathFormula.join(
                    this.$mathFormula.rightBottom("a", 'n'), this.$mathFormula.rightTop('x', 'n')
                )
            };
        },
    };
</script>
